package exercise1;

import java.util.ArrayList;
import java.util.Random;

import greenfoot.Actor;
import greenfoot.GreenfootImage;

public class Car extends Actor implements IntersectionListener{
	private String[] carImages = {"images\\topCarRed.png", "images\\topCarYellow.png",
								 "images\\topCarPurple.png", "images\\topCarBlue.png"};
	Random romanoff = new Random();
	private Direction direction;
	private Notify notifier = Notify.APPROACHING;
	private IntersectionObject intersection;
	private int position;
	private State light;
	private boolean atEdge;
	private int rotation;
	private boolean turn;
	private int counter;
	private ArrayList<CarBuilder> cars = new ArrayList<CarBuilder>();
	
	public Car(){
		GreenfootImage image = null;
		int num = romanoff.nextInt(4);
		
		switch(num){
		case 0:
			image = new GreenfootImage(carImages[num]);
			RedCar red = new RedCar(image, false, true, false);
			this.setImage(image);
			cars.add(red);
			break;
		case 1:
			image = new GreenfootImage(carImages[1]);
			YellowCar yellow = new YellowCar(image, true, true, false);
			this.setImage(image);
			cars.add(yellow);
			break;
		case 2:
			image = new GreenfootImage(carImages[2]);
			PurpleCar purple = new PurpleCar(image, true, false, true);
			this.setImage(image);
			cars.add(purple);
			break;
		case 3:
			image = new GreenfootImage(carImages[num]);
			BlueCar blue = new BlueCar(image, true, false, true);
			this.setImage(image);
			cars.add(blue);
			break;
		}
	}
	
	public void act(){
		checkNotifier();
		
		for(CarBuilder car: cars){
			checkIfTurn(car);
			checkIfLeave(car);
		}
		
		if(this.getOneIntersectingObject(Car.class) != null){
			try{
				throw new Throwable("Cars have collided.");
			}catch(Throwable e){
				Explosion explode = new Explosion();
				getWorld().addObject(explode, this.getX(), this.getY());
				removeTouching(Car.class);
				getWorld().removeObject(this);
			}
		}
		
	}
	
	public void checkNotifier(){
		
		switch(notifier){
		case APPROACHING:
		case INSIDE:
			if(direction == Direction.NORTH){
				position = 0;
			}else if(direction == Direction.EAST){
				position = 1;
			}else if(direction == Direction.SOUTH){
				position = 2;
			}else if(direction == Direction.WEST){
				position = 3;
			}
			light = intersection.lightReturn(position);
			checkLight();
			break;
		case LEAVING:
			move(1);
			break;
		}
	}
	
	public void checkLight(){
		switch(light){
		case YELLOW:
			move(5);
			break;
		case RED:
			move(0);
			break;
		default:
			move(1);
		}
		
	}
	
	public void checkIfTurn(CarBuilder car){
		if(counter == 30){
			if(car.getTurn()){
				rotation = car.turn(notifier, light, direction);
				decideToTurn();
			}
			
			counter = 0;
		}
		
		counter++;
	}
	
	public void checkIfLeave(CarBuilder car){
		if(isAtEdge()){
			if(car.getLeaves()){
				atEdge = true;
			}else if(car.getWrap()){
				if(car.getClass() == RedCar.class){
					redWrap(car);
				}
				else if(car.getClass() == YellowCar.class){
					yellowWrap(car);
				}
			}
		}
	}
	
	public void redWrap(CarBuilder car){
		if(direction == Direction.EAST){
			rotation = 180;
			setRotation(rotation);
			eastTurn();
		}else if(direction == Direction.WEST){
			rotation = 360;
			setRotation(rotation);
			westTurn();
		}else if(direction == Direction.NORTH){
			rotation = 90;
			setRotation(rotation);
			northTurn();
		}else if(direction == Direction.SOUTH){
			rotation = 270;
			setRotation(rotation);
			southTurn();
		}
	}
	
	public void yellowWrap(CarBuilder car){
		if(direction == Direction.EAST){
			rotation = 180;
			setRotation(rotation);
			eastTurn();
		}else if(direction == Direction.WEST){
			rotation = 360;
			setRotation(rotation);
			westTurn();
		}else if(direction == Direction.NORTH){
			rotation = 270;
			setRotation(rotation);
			northTurn();
		}else if(direction == Direction.SOUTH){
			rotation = 270;
			setRotation(rotation);
			southTurn();
		}
	}
	
	public void setDirection(Direction d){
		direction = d;
	}
	
	public Direction getDirection(){
		return direction;
	}
	
	@Override
	public void somethingIsApproaching(IntersectionObject intersection) {
		notifier = Notify.APPROACHING;
		this.intersection = intersection;
	}

	@Override
	public void somethingIsEntering(IntersectionObject intersection) {
		notifier = Notify.INSIDE;
		this.intersection = intersection;
	}

	@Override
	public void somethingIsLeaving(IntersectionObject intersection) {
		notifier = Notify.LEAVING;
		this.intersection = intersection;
	}
	
	public boolean getAtEdge(){
		return atEdge;
	}

	public void decideToTurn(){
		if(direction == Direction.EAST){
			checkInsideForRotation();
			if(turn){
				eastTurn();
			}
		}else if(direction == Direction.WEST){
			checkInsideForRotation();
			if(turn){
				westTurn();
			}
		}else if(direction == Direction.NORTH){
			checkInsideForRotation();
			if(turn){
				northTurn();
			}
		}else if(direction == Direction.SOUTH){
			checkInsideForRotation();
			if(turn){
				southTurn();
			}
		}
		
		checkNotifier();
	}
	
	public void checkInsideForRotation(){
		if(notifier == Notify.INSIDE && light != State.RED){
			turn = true;
			setRotation(rotation);
		}else{
			turn = false;
		}
		
		checkNotifier();
	}
	
	public void eastTurn(){
		switch(rotation){
		case 90:
			setDirection(Direction.NORTH);
			setLocation(intersection.getX() - 15, intersection.getY());
			break;
		case 270:
			setDirection(Direction.SOUTH);
		case 180:
			setDirection(Direction.WEST);
			setLocation(intersection.getX()+20, intersection.getY()-20);
			break;
		}
	}
	
	public void westTurn(){
		switch(rotation){
		case 90:
			setDirection(Direction.SOUTH);
			setLocation(intersection.getX() - 15, intersection.getY());
			break;
		case 270:
			setDirection(Direction.NORTH);
			setLocation(intersection.getX() + 15, intersection.getY());
			break;
		case 360:
			setDirection(Direction.EAST);
			setLocation(intersection.getX() + 20, intersection.getY() + 20);
			break;
		}
	}
	
	public void northTurn(){
		switch(rotation){
		case 90:
			setDirection(Direction.WEST);
			setLocation(intersection.getX()+20, intersection.getY() - 20);
			break;
		case 270:
			setDirection(Direction.EAST);
			setLocation(intersection.getX() + 20, intersection.getY()-20);
			break;
		case 360:
			setDirection(Direction.SOUTH);
			setLocation(intersection.getX() - 15, intersection.getY());
			break;
		}
	}
	
	public void southTurn(){
		switch(rotation){
		case 90:
			setDirection(Direction.EAST);
			setLocation(intersection.getX() + 20, intersection.getY()-20);
			break;
		case 360:
			setDirection(Direction.WEST);
			setLocation(intersection.getX()+20, intersection.getY() - 20);
			break;
		case 270:
			setDirection(Direction.NORTH);
			setLocation(intersection.getX() - 15, intersection.getY());
			break;
		}
	}
}
