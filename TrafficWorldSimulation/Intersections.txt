package exercise1;

import java.awt.Color;
import java.util.ArrayList;

import greenfoot.Actor;
import greenfoot.GreenfootImage;

public class IntersectionObject extends Actor implements Intersection{
	private TrafficLight[] trafficLight = new TrafficLight[4];
	public int roadWidth = 50;
	ArrayList <IntersectionListener> listeners = new ArrayList <IntersectionListener>();
	
	public IntersectionObject(){
		GreenfootImage intersection = new GreenfootImage(roadWidth, roadWidth);
		intersection.setColor(Color.GRAY);
		intersection.fill();
		this.setImage(intersection);
		
		createLights();
	}
	public void createLights(){
		for(int i = 0; i < trafficLight.length; i++){
			trafficLight[i] = new TrafficLight(State.GREEN);
		}
	}
	public void addLights(){
		for(int i = 0; i < trafficLight.length; i++){
			checkForRotation(i);
			checkForPlacement(i);
		}
	}
	
	public void checkForRotation(int i){
		int num = 0;
		if(i == 1){
			num = 90;
		}
		else if(i == 2){
			num = 180;
		}
		else if(i == 3){
			num = 270;
		}
		
		trafficLight[i].setRotation(num);
	}
	
	public void checkForPlacement(int i){
		
		if(i == 0){
			getWorld().addObject(trafficLight[i], this.getX(), getY() + roadWidth/2 +
								trafficLight[i].getImage().getHeight()/2);
		}
		else if(i == 1){
			getWorld().addObject(trafficLight[i], this.getX() - 50, getY() + roadWidth/2 +
								trafficLight[i].getImage().getHeight()/2 - 40);
		}
		else if(i ==2){
			getWorld().addObject(trafficLight[i], this.getX(), getY() + roadWidth/2 +
								trafficLight[i].getImage().getHeight()/2 - 85);
		}
		else if(i ==3){
			getWorld().addObject(trafficLight[i], this.getX() + 50, getY() + roadWidth/2 +
								trafficLight[i].getImage().getHeight()/2 - 40);
		}
	}
	
	@Override
	public void somethingIsApproaching(Car car) {
		for(IntersectionListener l : listeners){
			car.nearIntersection(Notify.APPROACHING);
		}	
	}
	
	@Override
	public void somethingIsEntering(Car car) {
		for(IntersectionListener l : listeners){
			car.nearIntersection(Notify.INSIDE);
		}
	}
	
	
	@Override
	public void somethingIsLeaving(Car car) {
		for(IntersectionListener l : listeners){
			car.nearIntersection(Notify.LEAVING);
		}
	}
	
	public void register(IntersectionListener listener){
		listeners.add(listener);
	}
}
